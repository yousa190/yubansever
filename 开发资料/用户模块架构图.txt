用户模块架构设计图
========================

┌─────────────────────────────────────────────────────────────────┐
│                        用户模块整体架构                          │
└─────────────────────────────────────────────────────────────────┘

┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   前端用户端     │    │  前端管理端      │    │   移动端        │
│  (yigoushop)   │    │(BackgroundMgmt) │    │   (未来扩展)    │
└─────────┬───────┘    └─────────┬───────┘    └─────────┬───────┘
          │                      │                      │
          └──────────────────────┼──────────────────────┘
                                 │
                    ┌─────────────┴─────────────┐
                    │         API Gateway        │
                    │     (统一接口入口)         │
                    └─────────────┬─────────────┘
                                 │
┌─────────────────────────────────────────────────────────────────┐
│                      后端服务层                                 │
├─────────────────────────────────────────────────────────────────┤
│                                                                 │
│  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐              │
│  │ 用户认证模块 │  │ 用户信息模块 │  │ 权限管理模块 │              │
│  │             │  │             │  │             │              │
│  │ • 用户注册   │  │ • 个人信息   │  │ • 角色管理   │              │
│  │ • 用户登录   │  │ • 头像管理   │  │ • 权限控制   │              │
│  │ • 密码管理   │  │ • 联系方式   │  │ • 菜单权限   │              │
│  │ • 会话管理   │  │ • 隐私设置   │  │ • 操作权限   │              │
│  └─────────────┘  └─────────────┘  └─────────────┘              │
│                                                                 │
│  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐              │
│  │ 用户行为模块 │  │ 安全模块     │  │ 通知模块     │              │
│  │             │  │             │  │             │              │
│  │ • 登录记录   │  │ • 密码加密   │  │ • 邮件通知   │              │
│  │ • 操作日志   │  │ • JWT验证    │  │ • 短信通知   │              │
│  │ • 安全监控   │  │ • 接口安全   │  │ • 系统通知   │              │
│  └─────────────┘  └─────────────┘  └─────────────┘              │
└─────────────────────────────────────────────────────────────────┘
                                 │
                    ┌─────────────┴─────────────┐
                    │        数据访问层          │
                    │     (MyBatis Plus)       │
                    └─────────────┬─────────────┘
                                 │
┌─────────────────────────────────────────────────────────────────┐
│                        数据存储层                               │
├─────────────────────────────────────────────────────────────────┤
│                                                                 │
│  ┌─────────────┐  ┌─────────────┐  ┌─────────────┐              │
│  │   MySQL     │  │    Redis    │  │   文件存储   │              │
│  │             │  │             │  │             │              │
│  │ • 用户信息   │  │ • 会话缓存   │  │ • 用户头像   │              │
│  │ • 权限数据   │  │ • 验证码     │  │ • 上传文件   │              │
│  │ • 登录日志   │  │ • 临时数据   │  │ • 系统文件   │              │
│  │ • 操作日志   │  │ • 热点数据   │  │             │              │
│  └─────────────┘  └─────────────┘  └─────────────┘              │
└─────────────────────────────────────────────────────────────────┘

用户认证流程
============

注册流程：
用户填写信息 → 前端验证 → 后端验证 → 发送邮箱验证码 → 
验证码验证 → 密码加密 → 创建用户 → 返回结果

登录流程：
用户输入账号密码 → 后端验证 → 密码比对 → 生成JWT Token → 
存储Redis会话 → 记录登录日志 → 返回Token和用户信息

权限验证流程：
请求接口 → 验证JWT Token → 获取用户信息 → 检查权限 → 
返回数据或拒绝访问

数据库表关系
============

sys_user (用户表)
├── user_id (主键)
├── username (用户名，唯一)
├── password_hash (加密密码)
├── email (邮箱，唯一)
├── phone (手机号)
├── sex (性别)
├── avatar (头像地址)
├── level (权限等级)
├── status (账户状态)
├── last_login (最后登录时间)
├── created_at (创建时间)
└── updated_at (更新时间)

sys_user_login_log (登录日志表)
├── log_id (主键)
├── user_id (外键 → sys_user.user_id)
├── login_ip (登录IP)
├── login_time (登录时间)
├── login_type (登录方式)
├── user_agent (用户代理)
└── login_result (登录结果)

接口设计规范
============

统一响应格式：
{
  "code": 200,           // 状态码
  "message": "成功",      // 响应消息
  "data": {},           // 响应数据
  "timestamp": 1640995200000  // 时间戳
}

状态码规范：
200 - 成功
400 - 客户端错误
401 - 未授权
403 - 禁止访问
404 - 资源不存在
500 - 服务器错误

安全设计要点
============

1. 密码安全：
   - 使用BCrypt加密存储
   - 前端验证密码强度
   - 支持密码重置

2. 会话安全：
   - JWT Token无状态验证
   - Redis存储敏感信息
   - 设置合理的过期时间

3. 接口安全：
   - 参数严格验证
   - SQL注入防护
   - XSS攻击防护
   - CSRF防护

4. 数据安全：
   - 敏感信息加密存储
   - 操作日志记录
   - 异常行为监控

开发优先级
==========

第一阶段（高优先级）：
1. 完成用户登录接口实现
2. 集成JWT Token机制
3. 完善Redis会话管理
4. 实现权限验证机制

第二阶段（中优先级）：
1. 完善头像上传功能
2. 实现用户端个人信息管理
3. 添加登录日志记录
4. 实现密码修改功能

第三阶段（低优先级）：
1. 记住登录状态功能
2. 自动登录功能
3. 异常登录检测
4. 细粒度权限控制
5. 用户行为分析

技术实现要点
============

后端实现：
- Spring Boot 3.2.4 框架
- MyBatis Plus 数据访问
- Spring Security 安全框架
- JWT 身份验证
- Redis 缓存和会话管理
- BCrypt 密码加密
- AOP 日志记录

前端实现：
- Vue 3 框架
- Element Plus UI组件库
- Pinia 状态管理
- Vue Router 路由管理
- Axios HTTP客户端
- 表单验证
- 权限路由守卫

部署架构：
- Nginx 反向代理
- Spring Boot 应用服务
- MySQL 数据库
- Redis 缓存服务
- 文件存储服务
